apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: aspnet-webapp-selenium-tests
  namespace: demo-pipeline
spec:
  params:
    - name: hostname
      type: string
    - name: app_env
      type: string
    - name: app_domain
      type: string
  steps:
    - env:
        - name: URI
          value: 'https://$(inputs.params.hostname).$(inputs.params.app_domain)'
        - name: API_URI
          value: >-
            https://$(inputs.params.hostname).$(inputs.params.app_domain)/api/booking
        - name: SELENIUM_HUB_URL
          value: 'http://selenium-hub-demo-selenium.apps.lab-ocp4.saslab.local/wd/hub'
      image: image-registry.openshift-image-registry.svc:5000/demo-pipeline/python-selenium:latest
      name: test-base-url
      resources: {}
      script: |
        echo Test webapp base URL

        echo Wait for app to finish spooling up
        
        sleep 30

        python3 -c "import sys,os
        from selenium import webdriver
        from selenium.webdriver.support.wait import WebDriverWait
        hub_url = os.environ.get('SELENIUM_HUB_URL')
        chrome_versions = ['110.0', '119.0', '121.0']
        firefox_versions = ['110.0', '119.0', '122.0']
        edge_versions = ['110.0', '119.0', '121.0']
        for version in chrome_versions:
            options = webdriver.ChromeOptions()
            options.set_capability(name='browserVersion', value=version)
            options.accept_insecure_certs = True
            driver = webdriver.Remote(command_executor=hub_url, options=options)
            driver.get(os.environ.get('URI'))
            WebDriverWait(driver, 3).until(lambda d: 'Car Parking' in d.page_source)
            page_content = driver.page_source
            driver.quit()
            if 'XYZ234' not in page_content:
              print(f'Base site load test failed with browser Chrome v{version}')
              sys.exit(1)
            else:
              print(f'Base site load test successful with browser Chrome v{version}')

        for version in firefox_versions:
            options = webdriver.FirefoxOptions()
            options.set_capability(name='browserVersion', value=version)
            options.accept_insecure_certs = True
            driver = webdriver.Remote(command_executor=hub_url, options=options)
            driver.get(os.environ.get('URI'))
            WebDriverWait(driver, 3).until(lambda d: 'Car Parking' in d.page_source)
            page_content = driver.page_source
            driver.quit()
            if 'XYZ234' not in page_content:
              print(f'Base site load test failed with browser Firefox v{version}')
              sys.exit(1)
            else:
              print(f'Base site load test successful with browser Firefox v{version}')

        for version in edge_versions:
            options = webdriver.EdgeOptions()
            options.set_capability(name='browserVersion', value=version)
            options.accept_insecure_certs = True
            driver = webdriver.Remote(command_executor=hub_url, options=options)
            driver.get(os.environ.get('URI'))
            WebDriverWait(driver, 3).until(lambda d: 'Car Parking' in d.page_source)
            page_content = driver.page_source
            driver.quit()
            if 'XYZ234' not in page_content:
              print(f'Base site load test failed with browser Edge v{version}')
              sys.exit(1)
            else:
              print(f'Base site load test successful with browser Edge v{version}')
        print('Base site load test successful with all browsers and versions')"
        
        echo -----------------------------------
    - env:
        - name: URI
          value: 'https://$(inputs.params.hostname).$(inputs.params.app_domain)'
        - name: API_URI
          value: >-
            https://$(inputs.params.hostname).$(inputs.params.app_domain)/api/booking
      image: image-registry.openshift-image-registry.svc:5000/demo-pipeline/python-selenium:latest
      name: test-api-url
      resources: {}
      script: >
        echo Test API base URL with a GET

        sleep 1

        response=$(curl -s --insecure \
          --header "Content-Type: application/vnd.api+json" \
          --request GET \
          $API_URI)

        if [ -z "$response" ]; then
          echo "Failed to query base webapp api URL. Are the route and db online and working?" 1>&2
          exit 1
        else
          echo "Test successful!"
        fi

        first_item=$(echo $response | python3 -c "import sys, json;
        print(json.load(sys.stdin)[0])")

        echo First item in db is $first_item

        echo -----------------------------------
    - env:
        - name: URI
          value: 'https://$(inputs.params.hostname).$(inputs.params.app_domain)'
        - name: API_URI
          value: >-
            https://$(inputs.params.hostname).$(inputs.params.app_domain)/api/booking
      image: image-registry.openshift-image-registry.svc:5000/demo-pipeline/python-selenium:latest
      name: test-api-post
      resources: {}
      script: >
        echo Test API URL with a POST request

        if [[ "$(inputs.params.app_env)" != "test" ]]; then
          echo "Skipping task as we do not want to POST a request in prod environment" 1>&2
          exit 0
        fi

        sleep 1

        query_param='{"rego":"ABC123","type":"Staff","parkingStart":"2023-05-02T08:00:00","parkingEnd":"2023-05-02T17:00:00"}'

        response=$(curl -s --insecure \
          --header "Content-Type: application/vnd.api+json" \
          --request POST \
          --data $query_param \
          $API_URI)

        if [ -z "$response" ]; then
          echo "Failed to post request to webapp api URL. Are the route and db online and working?" 1>&2
          exit 1
        else
          echo "Test successful!"
        fi

        echo -----------------------------------
    - env:
        - name: URI
          value: 'https://$(inputs.params.hostname).$(inputs.params.app_domain)'
        - name: API_URI
          value: >-
            https://$(inputs.params.hostname).$(inputs.params.app_domain)/api/booking
      image: image-registry.openshift-image-registry.svc:5000/demo-pipeline/python-selenium:latest
      name: test-api-type
      resources: {}
      script: >
        echo Test API URL with a GET to the type query

        sleep 1

        query_param='/type/Staff'

        response=$(curl -s --insecure \
          --header "Content-Type: application/vnd.api+json" \
          --request GET \
          "${API_URI}${query_param}")

        if [ -z "$response" ]; then
          echo "Failed to query webapp api URL. Are the route and db online and working?" 1>&2
          exit 1
        else
          echo "Test successful!"
        fi

        first_item=$(echo $response | python3 -c "import sys, json;
        print(json.load(sys.stdin)[0])")

        echo First item in db is $first_item

        echo -----------------------------------
    - env:
        - name: URI
          value: 'https://$(inputs.params.hostname).$(inputs.params.app_domain)'
        - name: API_URI
          value: >-
            https://$(inputs.params.hostname).$(inputs.params.app_domain)/api/booking
      image: image-registry.openshift-image-registry.svc:5000/demo-pipeline/python-selenium:latest
      name: test-api-rego
      resources: {}
      script: >
        echo Test API URL with a GET to the rego query

        sleep 5

        query_param='/rego/ABC123'

        expected_object='{"id":9,"rego":"ABC123","type":"Staff","parkingStart":"2023-05-02T08:00:00","parkingEnd":"2023-05-02T17:00:00"}'

        response=$(curl -s --insecure \
          --header "Content-Type: application/vnd.api+json" \
          --request GET \
          "${API_URI}${query_param}")

        if [ -z "$response" ]; then
          echo "Failed to query webapp api URL. Are the route and db online and working?" 1>&2
          exit 1
        else
          echo "Test successful!"
        fi

        if [[ "$(inputs.params.app_env)" != "test" ]]; then
          first_item=$(echo $response | python3 -c "import sys, json; print(json.load(sys.stdin))")
        else
          first_item=$(echo $response | python3 -c "import sys, json; print(json.load(sys.stdin)[1])")
        fi

        echo Item from POST request earlier in db is $first_item

        # if [[ "$first_item" == "$expected_object" ]]; then #   echo Item from
        POST request earlier in db is $first_item # else #   echo "API response
        did not match expected value" 1>&2 #   exit 1 # fi

        echo -----------------------------------